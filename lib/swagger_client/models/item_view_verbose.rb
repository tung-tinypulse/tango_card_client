=begin
#Tango Card RaaS API

#<p>Welcome to the RaaS&reg; API â€“ with this RESTful API you can integrate a global reward or incentive program into your app or platform.<br /><br /> This console works in our Sandbox environment. To receive your own credentials or to ask questions, please contact us <a href=\"mailto:devsupport@tangocard.com\">devsupport@tangocard.com</a>. <input type=\"hidden\" id=\"platformNameHolder\" value=\"QAPlatform2\" /><input type=\"hidden\" id=\"platformKeyHolder\" value=\"apYPfT6HNONpDRUj3CLGWYt7gvIHONpDRUYPfT6Hj\" /></p>

OpenAPI spec version: 2

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.2.3

=end

require 'date'

module SwaggerClient

  class ItemViewVerbose
    # Countries
    attr_accessor :countries

    # Created Date
    attr_accessor :created_date

    # Currency Code
    attr_accessor :currency_code

    # Exchange Rate Rule
    attr_accessor :exchange_rate_rule

    # Face Value
    attr_accessor :face_value

    # Last Updated Date
    attr_accessor :last_update_date

    # Max Value
    attr_accessor :max_value

    # Min Value
    attr_accessor :min_value

    # Reward Name
    attr_accessor :reward_name

    # Reward Type
    attr_accessor :reward_type

    # Status
    attr_accessor :status

    # Utid - Unique Tango Card ID.
    attr_accessor :utid

    # Value Type
    attr_accessor :value_type


    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'countries' => :'countries',
        :'created_date' => :'createdDate',
        :'currency_code' => :'currencyCode',
        :'exchange_rate_rule' => :'exchangeRateRule',
        :'face_value' => :'faceValue',
        :'last_update_date' => :'lastUpdateDate',
        :'max_value' => :'maxValue',
        :'min_value' => :'minValue',
        :'reward_name' => :'rewardName',
        :'reward_type' => :'rewardType',
        :'status' => :'status',
        :'utid' => :'utid',
        :'value_type' => :'valueType'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'countries' => :'Array<String>',
        :'created_date' => :'String',
        :'currency_code' => :'String',
        :'exchange_rate_rule' => :'String',
        :'face_value' => :'Float',
        :'last_update_date' => :'String',
        :'max_value' => :'Float',
        :'min_value' => :'Float',
        :'reward_name' => :'String',
        :'reward_type' => :'String',
        :'status' => :'String',
        :'utid' => :'String',
        :'value_type' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'countries')
        if (value = attributes[:'countries']).is_a?(Array)
          self.countries = value
        end
      end

      if attributes.has_key?(:'createdDate')
        self.created_date = attributes[:'createdDate']
      end

      if attributes.has_key?(:'currencyCode')
        self.currency_code = attributes[:'currencyCode']
      end

      if attributes.has_key?(:'exchangeRateRule')
        self.exchange_rate_rule = attributes[:'exchangeRateRule']
      end

      if attributes.has_key?(:'faceValue')
        self.face_value = attributes[:'faceValue']
      end

      if attributes.has_key?(:'lastUpdateDate')
        self.last_update_date = attributes[:'lastUpdateDate']
      end

      if attributes.has_key?(:'maxValue')
        self.max_value = attributes[:'maxValue']
      end

      if attributes.has_key?(:'minValue')
        self.min_value = attributes[:'minValue']
      end

      if attributes.has_key?(:'rewardName')
        self.reward_name = attributes[:'rewardName']
      end

      if attributes.has_key?(:'rewardType')
        self.reward_type = attributes[:'rewardType']
      end

      if attributes.has_key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.has_key?(:'utid')
        self.utid = attributes[:'utid']
      end

      if attributes.has_key?(:'valueType')
        self.value_type = attributes[:'valueType']
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properies with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @countries.nil?
        invalid_properties.push("invalid value for 'countries', countries cannot be nil.")
      end

      if @created_date.nil?
        invalid_properties.push("invalid value for 'created_date', created_date cannot be nil.")
      end

      if @currency_code.nil?
        invalid_properties.push("invalid value for 'currency_code', currency_code cannot be nil.")
      end

      if @exchange_rate_rule.nil?
        invalid_properties.push("invalid value for 'exchange_rate_rule', exchange_rate_rule cannot be nil.")
      end

      if @face_value.nil?
        invalid_properties.push("invalid value for 'face_value', face_value cannot be nil.")
      end

      if @last_update_date.nil?
        invalid_properties.push("invalid value for 'last_update_date', last_update_date cannot be nil.")
      end

      if @max_value.nil?
        invalid_properties.push("invalid value for 'max_value', max_value cannot be nil.")
      end

      if @min_value.nil?
        invalid_properties.push("invalid value for 'min_value', min_value cannot be nil.")
      end

      if @reward_name.nil?
        invalid_properties.push("invalid value for 'reward_name', reward_name cannot be nil.")
      end

      if @reward_type.nil?
        invalid_properties.push("invalid value for 'reward_type', reward_type cannot be nil.")
      end

      if @status.nil?
        invalid_properties.push("invalid value for 'status', status cannot be nil.")
      end

      if @utid.nil?
        invalid_properties.push("invalid value for 'utid', utid cannot be nil.")
      end

      if @value_type.nil?
        invalid_properties.push("invalid value for 'value_type', value_type cannot be nil.")
      end

      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @countries.nil?
      return false if @created_date.nil?
      return false if @currency_code.nil?
      return false if @exchange_rate_rule.nil?
      return false if @face_value.nil?
      return false if @last_update_date.nil?
      return false if @max_value.nil?
      return false if @min_value.nil?
      return false if @reward_name.nil?
      return false if @reward_type.nil?
      return false if @status.nil?
      return false if @utid.nil?
      return false if @value_type.nil?
      return true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          countries == o.countries &&
          created_date == o.created_date &&
          currency_code == o.currency_code &&
          exchange_rate_rule == o.exchange_rate_rule &&
          face_value == o.face_value &&
          last_update_date == o.last_update_date &&
          max_value == o.max_value &&
          min_value == o.min_value &&
          reward_name == o.reward_name &&
          reward_type == o.reward_type &&
          status == o.status &&
          utid == o.utid &&
          value_type == o.value_type
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [countries, created_date, currency_code, exchange_rate_rule, face_value, last_update_date, max_value, min_value, reward_name, reward_type, status, utid, value_type].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SwaggerClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
